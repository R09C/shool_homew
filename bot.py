import asyncio
import logging
import os
from datetime import datetime

from aiogram import Bot, Dispatcher, types
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from aiogram.utils.web_app import check_webapp_signature, safe_parse_webapp_init_data
from aiohttp import web
from sqlalchemy import (
    select,
    update,
    String,
    BigInteger,
    DateTime,
    Integer,
    JSON,
    Table,
    Column,
    ForeignKey,
    func,
)
from sqlalchemy.ext.asyncio import create_async_engine, async_sessionmaker, AsyncSession
from sqlalchemy.orm import selectinload

# --- –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –º–æ–¥–µ–ª–µ–π (–¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞) ---
# –≠—Ç–∏ –º–æ–¥–µ–ª–∏ –Ω–µ –±—ã–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã, –Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã –∫–æ–¥–∞.
# –Ø –¥–æ–±–∞–≤–∏–ª –∏—Ö —Å—é–¥–∞ –¥–ª—è –ø–æ–ª–Ω–æ—Ç—ã –∏ —è—Å–Ω–æ—Å—Ç–∏.

from sqlalchemy.orm import declarative_base, relationship

Base = declarative_base()


class User(Base):
    __tablename__ = "users"
    id = Column(BigInteger, primary_key=True)
    username = Column(String(255), nullable=False)
    points = Column(Integer, default=0, nullable=False)
    registered_at = Column(DateTime, default=func.now())
    task_completions = relationship(
        "UserTask", back_populates="user", cascade="all, delete-orphan"
    )

    def to_dict(self):
        return {
            "id": self.id,
            "username": self.username,
            "points": self.points,
            "registered_at": self.registered_at.isoformat(),
            "completed_tasks_count": len(self.task_completions),
        }


class Task(Base):
    __tablename__ = "tasks"
    id = Column(Integer, primary_key=True, autoincrement=True)
    title = Column(String, nullable=False)
    description = Column(String, nullable=False)
    difficulty = Column(String, nullable=False)
    points = Column(Integer, nullable=False)
    inference = Column(String, default="")  # –ü–æ–ª–µ –¥–ª—è –∫–æ–¥–∞-—à–∞–±–ª–æ–Ω–∞
    created_at = Column(DateTime, default=func.now())

    @classmethod
    async def generate_task_from_topic(cls, topic: str):
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞—á–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ API GPT
        # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        return cls(
            title=f"–ó–∞–¥–∞—á–∞ –ø–æ —Ç–µ–º–µ: {topic}",
            description="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞—á–∏ –Ω–∞ —Ç–µ–º—É " + topic,
            difficulty="–°—Ä–µ–¥–Ω–µ",
            points=10,
        )

    def to_dict(self):
        return {
            "id": self.id,
            "title": self.title,
            "description": self.description,
            "difficulty": self.difficulty,
            "points": self.points,
            "created_at": self.created_at.isoformat(),
        }


class UserTask(Base):
    __tablename__ = "user_tasks"
    user_id = Column(BigInteger, ForeignKey("users.id"), primary_key=True)
    task_id = Column(Integer, ForeignKey("tasks.id"), primary_key=True)
    earned_points = Column(Integer, nullable=False)
    completed_at = Column(DateTime, default=func.now())
    user = relationship("User", back_populates="task_completions")
    task = relationship("Task")


# --- –ö–æ–Ω–µ—Ü –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –º–æ–¥–µ–ª–µ–π ---

# –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏-–ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞ (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
from check_code import perform_comprehensive_evaluation

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBAPP_URL = os.getenv("WEBAPP_URL")
DATABASE_URL = os.getenv("DATABASE_URL")
PORT = int(os.getenv("PORT", 8080))

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SQLAlchemy ---
engine = create_async_engine(DATABASE_URL)
async_session = async_sessionmaker(engine, expire_on_commit=False, class_=AsyncSession)

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Aiogram ---
dp = Dispatcher()
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ ---


@dp.message(Command("start"))
async def start_command(message: types.Message, session: AsyncSession):
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name

    user = await session.get(User, user_id)
    if not user:
        user = User(id=user_id, username=username)
        session.add(user)
        await session.commit()
        logger.info(f"New user registered: {username} ({user_id})")

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üöÄ –û—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
                    web_app=WebAppInfo(url=f"{WEBAPP_URL}/app"),
                )
            ]
        ]
    )
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {username}! üëã\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–¥–∏–Ω–≥-–ø–ª–∞—Ç—Ñ–æ—Ä–º—É!",
        reply_markup=keyboard,
    )


@dp.message(Command("profile"))
async def profile_command(message: types.Message, session: AsyncSession):
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º selectinload –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (—Ä–µ—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á)
    # –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º –∫ –ë–î, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (lazy loading).
    stmt = (
        select(User)
        .options(selectinload(User.task_completions))
        .where(User.id == message.from_user.id)
    )
    result = await session.execute(stmt)
    user = result.scalar_one_or_none()

    if not user:
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return

    profile_text = (
        f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å</b>\n\n"
        f"–ò–º—è: {user.username}\n"
        f"–ë–∞–ª–ª—ã: {user.points}\n"
        f"–†–µ—à–µ–Ω–æ –∑–∞–¥–∞—á: {len(user.task_completions)}\n"
        f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.registered_at.strftime('%d.%m.%Y')}"
    )
    await message.answer(profile_text)


@dp.message(Command("newtask"))
async def create_new_task(message: types.Message, session: AsyncSession):
    topic = message.text.replace("/newtask", "").strip()
    if not topic:
        await message.answer(
            "–£–∫–∞–∂–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –∑–∞–¥–∞–Ω–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä: /newtask –∞–ª–≥–æ—Ä–∏—Ç–º—ã —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏"
        )
        return

    await message.answer("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

    try:
        task = await Task.generate_task_from_topic(topic)
        session.add(task)
        await session.commit()

        await message.answer(
            f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ!\n\n"
            f"<b>{task.title}</b>\n"
            f"–°–ª–æ–∂–Ω–æ—Å—Ç—å: {task.difficulty} ({task.points} –±–∞–ª–ª–æ–≤)\n\n"
            f"{task.description}"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞–Ω–∏—è: {e}", exc_info=True)
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# --- –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∏ API ---


@web.middleware
async def db_session_middleware(request: web.Request, handler):
    """Middleware –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –ë–î –∫–∞–∂–¥–æ–º—É –∑–∞–ø—Ä–æ—Å—É."""
    async with async_session() as session:
        request["session"] = session
        response = await handler(request)
        return response


async def webapp_handler(request: web.Request) -> web.Response:
    """–û—Ç–¥–∞–µ—Ç –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    return web.FileResponse("static/index.html")


async def api_get_user_handler(request: web.Request) -> web.Response:
    try:
        data = await request.json()
        init_data = data.get("initData")

        if not check_webapp_signature(BOT_TOKEN, init_data):
            return web.json_response(
                {"ok": False, "error": "Invalid signature"}, status=401
            )

        webapp_data = safe_parse_webapp_init_data(BOT_TOKEN, init_data=init_data)
        session: AsyncSession = request["session"]

        # –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        stmt = (
            select(User)
            .options(selectinload(User.task_completions))
            .where(User.id == webapp_data.user.id)
        )
        result = await session.execute(stmt)
        user = result.scalar_one_or_none()

        if user:
            # –ú–µ—Ç–æ–¥ to_dict –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (task_completions)
            return web.json_response({"ok": True, "user": user.to_dict()})
        else:
            return web.json_response(
                {"ok": False, "error": "User not found"}, status=404
            )
    except Exception as e:
        logger.error(f"Get user error: {e}", exc_info=True)
        return web.json_response(
            {"ok": False, "error": "Internal server error"}, status=500
        )


async def api_tasks_handler(request: web.Request) -> web.Response:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞—á."""
    session: AsyncSession = request["session"]
    result = await session.execute(select(Task))
    tasks = [task.to_dict() for task in result.scalars().all()]
    return web.json_response({"ok": True, "tasks": tasks})


async def api_generate_task(request: web.Request) -> web.Response:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –ø–æ –∑–∞–ø—Ä–æ—Å—É –∏–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    session: AsyncSession = request["session"]
    try:
        data = await request.json()
        topic = data.get("topic", "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ")

        task = await Task.generate_task_from_topic(topic)
        session.add(task)
        await session.commit()

        return web.json_response({"ok": True, "task": task.to_dict()})
    except Exception as e:
        logger.error(f"Error generating task: {e}", exc_info=True)
        return web.json_response(
            {"ok": False, "error": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ"}, status=500
        )


async def api_submit_handler(request: web.Request) -> web.Response:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –∏–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    session: AsyncSession = request["session"]
    try:
        data = await request.json()
        init_data = data.get("initData")

        if not check_webapp_signature(BOT_TOKEN, init_data):
            return web.json_response(
                {"ok": False, "error": "Invalid signature"}, status=401
            )

        webapp_data = safe_parse_webapp_init_data(BOT_TOKEN, init_data=init_data)
        user_id = webapp_data.user.id
        task_id = int(data.get("taskId"))

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–µ—à–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —ç—Ç—É –∑–∞–¥–∞—á—É —Ä–∞–Ω–µ–µ
        completion_stmt = select(UserTask).where(
            UserTask.user_id == user_id, UserTask.task_id == task_id
        )
        existing_completion = (
            await session.execute(completion_stmt)
        ).scalar_one_or_none()
        if existing_completion:
            return web.json_response(
                {"ok": True, "passed": False, "message": "–í—ã —É–∂–µ —Ä–µ—à–∏–ª–∏ —ç—Ç—É –∑–∞–¥–∞—á—É!"}
            )

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å –µ–≥–æ —Ä–µ—à–µ–Ω–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏) –∏ —Å–∞–º—É –∑–∞–¥–∞—á—É
        user_stmt = (
            select(User)
            .options(selectinload(User.task_completions))
            .where(User.id == user_id)
        )
        user = (await session.execute(user_stmt)).scalar_one_or_none()
        task = await session.get(Task, task_id)

        if not user or not task:
            return web.json_response(
                {"ok": False, "error": "User or Task not found"}, status=404
            )

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞
        points, is_correct = perform_comprehensive_evaluation(
            template_code=task.inference,
            submitted_code=data.get("code"),
            algorithm_name=task.title,
        )

        if is_correct > 3:  # –£—Å–ª–æ–≤–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è
            new_completion = UserTask(
                user_id=user_id, task_id=task_id, earned_points=task.points
            )
            session.add(new_completion)
            user.points += task.points

            await session.commit()

            # –¢–∞–∫ –∫–∞–∫ –º—ã –∑–∞—Ä–∞–Ω–µ–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏ user.task_completions —á–µ—Ä–µ–∑ selectinload
            # –∏ SQLAlchemy –æ–±–Ω–æ–≤–∏–ª —ç—Ç—É –∫–æ–ª–ª–µ–∫—Ü–∏—é –≤ –ø–∞–º—è—Ç–∏ –ø–æ—Å–ª–µ session.add(),
            # –º—ã –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—É—é –¥–ª–∏–Ω—É –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ë–î.
            return web.json_response(
                {
                    "ok": True,
                    "passed": True,
                    "message": f"–û—Ç–ª–∏—á–Ω–æ! –ó–∞–¥–∞—á–∞ —Ä–µ—à–µ–Ω–∞. –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {task.points} –±–∞–ª–ª–æ–≤.",
                    "new_points": user.points,
                    "new_completed_count": len(user.task_completions),
                }
            )
        else:
            return web.json_response(
                {
                    "ok": True,
                    "passed": False,
                    "message": "–†–µ—à–µ–Ω–∏–µ –Ω–µ–≤–µ—Ä–Ω–æ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                }
            )

    except Exception as e:
        logger.error(f"Submit error: {e}", exc_info=True)
        return web.json_response(
            {"ok": False, "error": "Submission failed"}, status=500
        )


async def on_startup(app: web.Application):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    logger.info("Application starting up...")
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)
        async with async_session(bind=conn) as session:
            if not (await session.execute(select(Task))).scalars().first():
                logger.info("No initial tasks found. Populating database...")
                initial_tasks = [
                    Task(
                        title="–û—Å–Ω–æ–≤—ã Python",
                        description="–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –º–∞—Å—Å–∏–≤–∞",
                        difficulty="–õ–µ–≥–∫–æ",
                        points=5,
                    ),
                    Task(
                        title="–ê–ª–≥–æ—Ä–∏—Ç–º—ã",
                        description="–†–µ–∞–ª–∏–∑—É–π—Ç–µ –∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ–∏—Å–∫–∞ –≤ –≥–ª—É–±–∏–Ω—É",
                        difficulty="–°—Ä–µ–¥–Ω–µ",
                        points=10,
                    ),
                    Task(
                        title="–°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö",
                        description="–°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∏–Ω–∞—Ä–Ω—ã–º –¥–µ—Ä–µ–≤–æ–º",
                        difficulty="–°–ª–æ–∂–Ω–æ",
                        points=15,
                    ),
                ]
                session.add_all(initial_tasks)
                await session.commit()
                logger.info("Initial tasks have been added to the database.")

    webhook_url = f"{WEBAPP_URL}/webhook"
    await bot.set_webhook(webhook_url, drop_pending_updates=True)
    logger.info(f"Webhook set to {webhook_url}")


async def on_shutdown(app: web.Application):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    logger.info("Application shutting down...")
    await bot.delete_webhook()
    logger.info("Webhook deleted")


async def webhook_handler(request: web.Request):
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram –∏ –ø–µ—Ä–µ–¥–∞–µ—Ç –∏—Ö –≤ Dispatcher."""
    update_data = await request.json()
    update = types.Update.model_validate(update_data, context={"bot": bot})
    async with async_session() as session:
        await dp.feed_update(bot=bot, update=update, session=session)
    return web.Response()


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    app = web.Application(middlewares=[db_session_middleware])
    app.on_startup.append(on_startup)
    app.on_shutdown.append(on_shutdown)

    # –°—Ç–∞—Ç–∏–∫–∞ –∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã API
    app.router.add_get("/app", webapp_handler)
    app.router.add_post("/webhook", webhook_handler)
    app.router.add_post("/api/getUser", api_get_user_handler)
    app.router.add_get("/api/tasks", api_tasks_handler)
    app.router.add_post("/api/submit", api_submit_handler)
    app.router.add_post("/api/generate-task", api_generate_task)

    # –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ –ø–∞–ø–∫–µ 'static')
    app.router.add_static("/", path="static", name="static")

    web.run_app(app, host="0.0.0.0", port=PORT)


if __name__ == "__main__":
    if not all([BOT_TOKEN, WEBAPP_URL, DATABASE_URL]):
        logger.critical(
            "–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã! (BOT_TOKEN, WEBAPP_URL, DATABASE_URL)"
        )
    else:
        main()
